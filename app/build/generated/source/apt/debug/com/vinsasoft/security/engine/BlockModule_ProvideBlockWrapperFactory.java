// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.vinsasoft.security.engine;

import com.vinsasoft.security.service.BlockWrapper;
import com.vinsasoft.security.service.EndCallService;
import com.vinsasoft.security.service.MasterChecker;
import com.vinsasoft.security.service.NormalizerService;
import com.vinsasoft.security.stuff.AppPreferences;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class BlockModule_ProvideBlockWrapperFactory implements Factory<BlockWrapper> {
  private final BlockModule module;

  private final Provider<MasterChecker> masterCheckerProvider;

  private final Provider<EndCallService> endCallServiceProvider;

  private final Provider<NormalizerService> normalizerServiceProvider;

  private final Provider<AppPreferences> appPreferencesProvider;

  public BlockModule_ProvideBlockWrapperFactory(
      BlockModule module,
      Provider<MasterChecker> masterCheckerProvider,
      Provider<EndCallService> endCallServiceProvider,
      Provider<NormalizerService> normalizerServiceProvider,
      Provider<AppPreferences> appPreferencesProvider) {
    assert module != null;
    this.module = module;
    assert masterCheckerProvider != null;
    this.masterCheckerProvider = masterCheckerProvider;
    assert endCallServiceProvider != null;
    this.endCallServiceProvider = endCallServiceProvider;
    assert normalizerServiceProvider != null;
    this.normalizerServiceProvider = normalizerServiceProvider;
    assert appPreferencesProvider != null;
    this.appPreferencesProvider = appPreferencesProvider;
  }

  @Override
  public BlockWrapper get() {
    return Preconditions.checkNotNull(
        module.provideBlockWrapper(
            masterCheckerProvider.get(),
            endCallServiceProvider.get(),
            normalizerServiceProvider.get(),
            appPreferencesProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<BlockWrapper> create(
      BlockModule module,
      Provider<MasterChecker> masterCheckerProvider,
      Provider<EndCallService> endCallServiceProvider,
      Provider<NormalizerService> normalizerServiceProvider,
      Provider<AppPreferences> appPreferencesProvider) {
    return new BlockModule_ProvideBlockWrapperFactory(
        module,
        masterCheckerProvider,
        endCallServiceProvider,
        normalizerServiceProvider,
        appPreferencesProvider);
  }
}
