// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.saeedsoft.security.stuff;

import com.saeedsoft.security.service.BlackListWrapper;
import com.saeedsoft.security.service.ImportExportWrapper;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;

public final class AppContext_MembersInjector implements MembersInjector<AppContext> {
  private final Provider<AppPreferences> appPreferencesProvider;

  private final Provider<ImportExportWrapper> importExportWrapperProvider;

  private final Provider<BlackListWrapper> blackListWrapperProvider;

  public AppContext_MembersInjector(
      Provider<AppPreferences> appPreferencesProvider,
      Provider<ImportExportWrapper> importExportWrapperProvider,
      Provider<BlackListWrapper> blackListWrapperProvider) {
    assert appPreferencesProvider != null;
    this.appPreferencesProvider = appPreferencesProvider;
    assert importExportWrapperProvider != null;
    this.importExportWrapperProvider = importExportWrapperProvider;
    assert blackListWrapperProvider != null;
    this.blackListWrapperProvider = blackListWrapperProvider;
  }

  public static MembersInjector<AppContext> create(
      Provider<AppPreferences> appPreferencesProvider,
      Provider<ImportExportWrapper> importExportWrapperProvider,
      Provider<BlackListWrapper> blackListWrapperProvider) {
    return new AppContext_MembersInjector(
        appPreferencesProvider, importExportWrapperProvider, blackListWrapperProvider);
  }

  @Override
  public void injectMembers(AppContext instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.appPreferences = appPreferencesProvider.get();
    instance.importExportWrapper = DoubleCheck.lazy(importExportWrapperProvider);
    instance.blackListWrapper = DoubleCheck.lazy(blackListWrapperProvider);
  }

  public static void injectAppPreferences(
      AppContext instance, Provider<AppPreferences> appPreferencesProvider) {
    instance.appPreferences = appPreferencesProvider.get();
  }

  public static void injectImportExportWrapper(
      AppContext instance, Provider<ImportExportWrapper> importExportWrapperProvider) {
    instance.importExportWrapper = DoubleCheck.lazy(importExportWrapperProvider);
  }

  public static void injectBlackListWrapper(
      AppContext instance, Provider<BlackListWrapper> blackListWrapperProvider) {
    instance.blackListWrapper = DoubleCheck.lazy(blackListWrapperProvider);
  }
}
