// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.vinsasoft.security.engine;

import com.vinsasoft.security.db.dao.BlackListDAO;
import com.vinsasoft.security.service.BlackListChecker;
import com.vinsasoft.security.service.MatcherService;
import com.vinsasoft.security.service.NormalizerService;
import com.vinsasoft.security.stuff.AppPreferences;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class BlockModule_ProvidesBlackListCheckerFactory
    implements Factory<BlackListChecker> {
  private final BlockModule module;

  private final Provider<AppPreferences> preferencesProvider;

  private final Provider<MatcherService> matcherServiceProvider;

  private final Provider<BlackListDAO> blackListDAOProvider;

  private final Provider<NormalizerService> normalizerServiceProvider;

  public BlockModule_ProvidesBlackListCheckerFactory(
      BlockModule module,
      Provider<AppPreferences> preferencesProvider,
      Provider<MatcherService> matcherServiceProvider,
      Provider<BlackListDAO> blackListDAOProvider,
      Provider<NormalizerService> normalizerServiceProvider) {
    assert module != null;
    this.module = module;
    assert preferencesProvider != null;
    this.preferencesProvider = preferencesProvider;
    assert matcherServiceProvider != null;
    this.matcherServiceProvider = matcherServiceProvider;
    assert blackListDAOProvider != null;
    this.blackListDAOProvider = blackListDAOProvider;
    assert normalizerServiceProvider != null;
    this.normalizerServiceProvider = normalizerServiceProvider;
  }

  @Override
  public BlackListChecker get() {
    return Preconditions.checkNotNull(
        module.providesBlackListChecker(
            preferencesProvider.get(),
            matcherServiceProvider.get(),
            blackListDAOProvider.get(),
            normalizerServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<BlackListChecker> create(
      BlockModule module,
      Provider<AppPreferences> preferencesProvider,
      Provider<MatcherService> matcherServiceProvider,
      Provider<BlackListDAO> blackListDAOProvider,
      Provider<NormalizerService> normalizerServiceProvider) {
    return new BlockModule_ProvidesBlackListCheckerFactory(
        module,
        preferencesProvider,
        matcherServiceProvider,
        blackListDAOProvider,
        normalizerServiceProvider);
  }
}
